// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/customer_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/service/customer_service.go -destination=internal/domain/service/mock/mock_customer_service.go -package=mock_service
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	model "github.com/wandermaia/customer-api/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomerService is a mock of CustomerService interface.
type MockCustomerService struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerServiceMockRecorder
	isgomock struct{}
}

// MockCustomerServiceMockRecorder is the mock recorder for MockCustomerService.
type MockCustomerServiceMockRecorder struct {
	mock *MockCustomerService
}

// NewMockCustomerService creates a new mock instance.
func NewMockCustomerService(ctrl *gomock.Controller) *MockCustomerService {
	mock := &MockCustomerService{ctrl: ctrl}
	mock.recorder = &MockCustomerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerService) EXPECT() *MockCustomerServiceMockRecorder {
	return m.recorder
}

// CountCustomers mocks base method.
func (m *MockCustomerService) CountCustomers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCustomers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCustomers indicates an expected call of CountCustomers.
func (mr *MockCustomerServiceMockRecorder) CountCustomers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCustomers", reflect.TypeOf((*MockCustomerService)(nil).CountCustomers), ctx)
}

// CreateCustomer mocks base method.
func (m *MockCustomerService) CreateCustomer(ctx context.Context, customer *model.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockCustomerServiceMockRecorder) CreateCustomer(ctx, customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockCustomerService)(nil).CreateCustomer), ctx, customer)
}

// DeleteCustomer mocks base method.
func (m *MockCustomerService) DeleteCustomer(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomer indicates an expected call of DeleteCustomer.
func (mr *MockCustomerServiceMockRecorder) DeleteCustomer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomer", reflect.TypeOf((*MockCustomerService)(nil).DeleteCustomer), ctx, id)
}

// GetAllCustomers mocks base method.
func (m *MockCustomerService) GetAllCustomers(ctx context.Context) ([]*model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCustomers", ctx)
	ret0, _ := ret[0].([]*model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCustomers indicates an expected call of GetAllCustomers.
func (mr *MockCustomerServiceMockRecorder) GetAllCustomers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCustomers", reflect.TypeOf((*MockCustomerService)(nil).GetAllCustomers), ctx)
}

// GetCustomerByID mocks base method.
func (m *MockCustomerService) GetCustomerByID(ctx context.Context, id uint) (*model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByID", ctx, id)
	ret0, _ := ret[0].(*model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByID indicates an expected call of GetCustomerByID.
func (mr *MockCustomerServiceMockRecorder) GetCustomerByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByID", reflect.TypeOf((*MockCustomerService)(nil).GetCustomerByID), ctx, id)
}

// GetCustomersByName mocks base method.
func (m *MockCustomerService) GetCustomersByName(ctx context.Context, name string) ([]*model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomersByName", ctx, name)
	ret0, _ := ret[0].([]*model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomersByName indicates an expected call of GetCustomersByName.
func (mr *MockCustomerServiceMockRecorder) GetCustomersByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomersByName", reflect.TypeOf((*MockCustomerService)(nil).GetCustomersByName), ctx, name)
}

// UpdateCustomer mocks base method.
func (m *MockCustomerService) UpdateCustomer(ctx context.Context, customer *model.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", ctx, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockCustomerServiceMockRecorder) UpdateCustomer(ctx, customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockCustomerService)(nil).UpdateCustomer), ctx, customer)
}
