@startuml
' Define a skin for better visuals
skinparam classAttributeIconSize 0
skinparam packageStyle rectangle

package "internal/domain/model" <<Folder>> {
  class Customer {
    + ID: uint
    + Name: string
    + Email: string
    + Phone: string
    + Address: string
    + Active: bool
    + CreatedAt: time.Time
    + UpdatedAt: time.Time
    --
    + Validate() : error
  }
  Customer ..> "validator.v10" : uses
}

package "internal/domain/repository" <<Folder>> {
  interface CustomerRepository {
    + Create(ctx, customer) : error
    + GetByID(ctx, id) : (*model.Customer, error)
    + GetAll(ctx) : ([]*model.Customer, error)
    + GetByName(ctx, name) : ([]*model.Customer, error)
    + Update(ctx, customer) : error
    + Delete(ctx, id) : error
    + Count(ctx) : (int64, error)
  }

  class postgresCustomerRepository {
    - db: *gorm.DB
    --
    + Create(ctx, customer) : error
    + GetByID(ctx, id) : (*model.Customer, error)
    + GetAll(ctx) : ([]*model.Customer, error)
    + GetByName(ctx, name) : ([]*model.Customer, error)
    + Update(ctx, customer) : error
    + Delete(ctx, id) : error
    + Count(ctx) : (int64, error)
  }
  postgresCustomerRepository ..|> CustomerRepository : implements
  postgresCustomerRepository --> "gorm.DB" : uses
  postgresCustomerRepository --> model.Customer : uses
}

package "internal/domain/service" <<Folder>> {
  interface CustomerService {
    + CreateCustomer(ctx, customer) : error
    + GetCustomerByID(ctx, id) : (*model.Customer, error)
    + GetAllCustomers(ctx) : ([]*model.Customer, error)
    + GetCustomersByName(ctx, name) : ([]*model.Customer, error)
    + UpdateCustomer(ctx, customer) : error
    + DeleteCustomer(ctx, id) : error
    + CountCustomers(ctx) : (int64, error)
  }

  class customerService {
    - repo: repository.CustomerRepository
    --
    + CreateCustomer(ctx, customer) : error
    + GetCustomerByID(ctx, id) : (*model.Customer, error)
    + GetAllCustomers(ctx) : ([]*model.Customer, error)
    + GetCustomersByName(ctx, name) : ([]*model.Customer, error)
    + UpdateCustomer(ctx, customer) : error
    + DeleteCustomer(ctx, id) : error
    + CountCustomers(ctx) : (int64, error)
  }
  customerService ..|> CustomerService : implements
  customerService --> repository.CustomerRepository : uses
  customerService --> model.Customer : uses
}

@enduml
